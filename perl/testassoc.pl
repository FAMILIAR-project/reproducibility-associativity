use strict;
use warnings;
use Math::Trig; # for pi, forget by ChatGPT
use Getopt::Long qw(GetOptions);

use enum qw(ASSOCIATIVITY MULT_INV MULT_INV_PI); # basically never used... TODO: should do better

sub equality_test {
my ($equality_check, $x, $y, $z) = @_;
if ($equality_check eq "ASSOCIATIVITY") { # if ($equality_check eq ASSOCIATIVITY) { as originally generated by ChatGPT does not work...
return ($x+($y+$z) == (($x+$y)+$z));
} elsif ($equality_check eq "MULT_INV") {
return (($x*$z)/($y*$z) == ($x/$y));
} elsif ($equality_check eq "MULT_INV_PI") {
# return (($x*$zmath::pi)/($y$z*math::pi) == ($x/$y)); # originally generated as such by ChatGPT, some confusion with... PHP?
return (($x*$z*pi)/($y*$z*pi) == ($x/$y));
}
}

sub proportion {
my ($number, $seed_val, $equality_check) = @_;
if (defined $seed_val) {    
    srand($seed_val); 
}
else {
    # if $seed_val is undef, then it is set to a random value (and let's implement this way: without calling srand()) (see https://perldoc.perl.org/functions/srand.html
    # so let's do nothing
}
my $ok = 0;
for (my $i = 0; $i < $number; $i++) {
my $x = rand();
my $y = rand();
my $z = rand();
$ok += equality_test($equality_check, $x, $y, $z);
}
return ($ok*100)/$number;
}

my $seed_val = undef;
my $number = 10000;
my $equality_check;

GetOptions(
'seed:i' => \$seed_val, # the \ was forgotten by ChatGPT https://stackoverflow.com/questions/54204971/undefined-argument-in-option-spec
'number:i' => \$number,
'equality-check:s' => \$equality_check
) or die "Usage: $0 --seed SEED_VAL --number NUM_TESTS --equality-check {ASSOCIATIVITY, MULT_INV, MULT_INV_PI}\n";

die "Equality check not specified\n" unless $equality_check;

my $proportion = proportion($number, $seed_val, $equality_check);

print $proportion."%\n";